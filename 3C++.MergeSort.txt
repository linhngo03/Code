//  C++ code sample 
//  Created by Linh Ngo
//  MergeSort.cpp
//  MergeSort
//  For Data Structure Class 

// To Do
#include <iostream>
#include <vector>
using namespace std;
// ---------------------------------------------------------------
// Task 1: Define a MergeSort Class
// ---------------------------------------------------------------
// Below is a class for merge sort.
//
// It has a private vector "list" that holds the list to sort.
// All member functions should operate on "list".
//
// It has several public member functions.
// 1. SetList: assign a vector (to sort) to "list".
// 2. GetList: return the current "list"
// 3. SortList: sort "list" based on the merge sort algorithm.
//

// A key feature in the given SortList function is to call
// a recursive function "RecursiveSort", which recursively
// splits the input list, sorts each split, and merges the splits
// Note "RecursiveSort" takes input by value and returns a sorted input.

class MergeSort {
public:
    void SetList(vector<int> InputList)
    {
        list=InputList;
    }
   
    vector<int> GetList()
    {
        return list;
    }
    void SortList();
private:
    vector<int> list;
    vector<int> RecursiveSort(vector<int> x)
    {
        
       if(x.size()==1)
       {
           return x;
       }
        
        int middle = (int)x.size() / 2;
        
        vector<int> list_l;
        vector<int> list_r;
                
                int i = 0; //left array
                int j = 0; //right array
                
                for(; i < x.size(); i++) {
                    if(i < middle) {
                        list_l.push_back(x[i]);
                    }
                    else {
                        list_r.push_back(x[i]);
                
                        j++;
                    }
                }
        
        list_l = RecursiveSort(list_l);
        list_r = RecursiveSort(list_r);
    
        x=Merge(list_l,list_r );
        return x;
    }


vector<int> Merge(vector<int> list_l, vector<int> list_r)
{
    vector<int > copy;
    int leftSize = (int)list_l.size();
    int rightSize = (int)list_r.size();
    int i2 = 0, l = 0, r = 0; //indices
    
    //check the conditions for merging
    while(l < leftSize && r < rightSize) {
        if(list_l[l] < list_r[r]) {
            copy.push_back(list_l[l]);
            
            i2++;
            l++;
        }
        else {
           
            copy.push_back(list_r[r]);
            i2++;
            r++;
        }
    }
    while(l < leftSize) {
        copy.push_back(list_l[l]);
       
        i2++;
        l++;
    }
    while(r < rightSize) {
        copy.push_back(list_r[r]);
        i2++;
        r++;
    }
    return copy;
}
};
// Below is a template for the MergeSort function.
// Note it is not recursive. Only "RecursiveSort" is recursive.
void MergeSort::SortList() {
    // Step 1. Split "list" into list_l and list_r
    // list_l = left sublist
    // list_r = right sublist
    // ......
    // Step 2. Call RecursiveSort to sort each sublist
    //list_l = RecursiveSort(list_l);
    //list_r = RecursiveSort(list_r);
    // Step 3. Merge list_l and list_r back to "list"
    // list = [list_l, list_r]
    
    int length = int (list.size());
            if (length <= 1) return; //base case
            
            int middle = (int)length / 2;
    
    vector<int> list_l(list.begin(),list.end()-middle);
    vector<int> list_r(list.end()-middle,list.end());
            
            int i = 0; //left array
            int j = 0; //right array
            
            for(; i < length; i++) {
                if(i < middle) {
                    list_l[i] = list[i];
                }
                else {
                    list_r[j] = list[i];
                    j++;
                }
            }
    
    
    list_l = RecursiveSort(list_l);
    list_r = RecursiveSort(list_r);
    
    list= Merge(list_l,list_r);
        }


// ---------------------------------------------------------------
int main()
{
    // First input an arbitrary number of non-repeated integers into a vector.
    // The input of this list will terminate when we give an non-integer input
//e.g., letter 'a'.
    // Then, pass this vector to the MergeSort object.

    vector<int> InputList;
    vector<int> TestList;
    int temp, mode;
    MergeSort x;
    // takie inputs
    cin >> mode;
    while (cin >> temp) {
        InputList.push_back(temp);
    }
    x.SetList(InputList);
    // start testing functions
    switch (mode) {
    case 1: // check if input is correct
        TestList = x.GetList();
        for (int i = 0; i < TestList.size(); i++) {
            cout << TestList.at(i) << endl;
        }
        break;
    case 2: // check if SortList is correct
        x.SortList();
        TestList = x.GetList();
        for (int i = 0; i < TestList.size(); i++) {
            cout << TestList.at(i) << endl;
        }
        break;
    }
    return 0;
}
